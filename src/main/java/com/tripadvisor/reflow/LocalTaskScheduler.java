/*
 * Copyright (C) 2017 TripAdvisor LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.tripadvisor.reflow;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.Executor;
import java.util.function.BiFunction;
import java.util.function.Function;

import com.google.common.base.Preconditions;

/**
 * A task scheduler that executes tasks locally via an {@link Executor}.
 *
 * <p>Scheduling tokens generated by this class can only be used with the
 * instance that generated them, but they remain valid indefinitely.</p>
 */
public class LocalTaskScheduler<T> implements TaskScheduler<T>
{
    private final Executor m_executor;
    private final Function<T, ? extends Runnable> m_taskToRunnableFunc;
    private final ConcurrentMap<ScheduledTaskToken, CompletionStage<Void>> m_futures = new ConcurrentHashMap<>();

    private LocalTaskScheduler(Executor executor, Function<T, ? extends Runnable> taskToRunnableFunc)
    {
        m_executor = executor;
        m_taskToRunnableFunc = taskToRunnableFunc;
    }

    /**
     * Returns a task scheduler, backed by the given executor,
     * for tasks that implement the {@link Runnable} interface.
     */
    public static LocalTaskScheduler<Runnable> create(Executor executor)
    {
        return new LocalTaskScheduler<>(Preconditions.checkNotNull(executor), Function.identity());
    }

    /**
     * Returns a task scheduler, backed by the given executor, that uses the
     * given function to translate tasks into {@link Runnable} instances.
     */
    public static <U> LocalTaskScheduler<U> create(Executor executor,
                                                   Function<U, ? extends Runnable> taskToRunnableFunc)
    {
        return new LocalTaskScheduler<>(Preconditions.checkNotNull(executor),
                                        Preconditions.checkNotNull(taskToRunnableFunc));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledTaskToken submit(T task, TaskCompletionCallback callback)
    {
        CompletionStage<Void> future = CompletableFuture.runAsync(m_taskToRunnableFunc.apply(task), m_executor);
        future.handle(makeHandler(callback));

        ScheduledTaskToken token = new ScheduledTaskToken() {};
        m_futures.put(token, future);
        return token;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void registerCallback(ScheduledTaskToken token, TaskCompletionCallback callback) throws InvalidTokenException
    {
        CompletionStage<Void> future = m_futures.get(token);
        if (future == null)
        {
            throw new InvalidTokenException();
        }
        future.handle(makeHandler(callback));
    }

    private BiFunction<Void, Throwable, Void> makeHandler(TaskCompletionCallback callback)
    {
        return (v, t) ->
        {
            if (t == null)
            {
                callback.reportSuccess();
            }
            else if (t instanceof CompletionException && t.getCause() != null)
            {
                // The CompletionStage docs suggest that we should get the raw exception,
                // but in practice we get it wrapped in a CompletionException
                callback.reportFailure(t.getCause());
            }
            else
            {
                callback.reportFailure(t);
            }
            return null;
        };
    }
}
